Travelling Salesman, ver. 1.1.1

Description:

This program heuristically solves the classic problem of The
Travelling Salesman: How to visit a number of cities once and minimize
the overall distance travelled.

Algorithms exist that can solve this problem exactly. However, as the
number of cities grow, the time required to find the solution grows
exponentially. When you get above, say, 100 cities, you need a rather
powerful computer if you want the solution this side of Christmas.

If you want a fast answer and you can live with not having the exact
solution, the way to solve the TSP problem is by heuristics. A common
heuristic method is to start in a city and then travel to the nearest
city and so on, until all cities have been visited.

This program uses a genetic algorithm as a heuristic approach. A
genetic algorithm mimicks natural evolution: Out of a population of
individuals (which in fact each represent a proposed solutions in
the form of a route between all cities) the fittest are selected to
mate, creating new individuals (new proposed routes).

Basically, with the proper criteria and methods for fitness, selection,
and reproduction, some of the new individuals represent better
solutions (in this case less overall distance). These individuals are
then selected for a new generation, and so on. That is how a genetic
algorithm works.

Get the latest version from
http://www3.ewebcity.com/troels/delphi.html

For more information on genetic algorithms, try
http://www3.ewebcity.com/troels/genealgo.asp



How to use:

- Cities: the number of cities to travel between. They will be placed
  randomly on the map.

- Pop. size: number of individuals making up the population. A larger
  population means a bigger "gene pool", lessening the chance of an
  evolutionary dead end, where all individuals look the same.

- Parents: number of parents in the population which will be allowed
  to mate. Only the fittest (least overall distance) members of the
  population are selected.

- Mutation %: mutation rate, the chance that new individuals will
  mutate slightly, ie. represent another route.

- Generations: for how may generations should the simulation run?
  Each generation consists of selection and mating, killing unfit
  individuals and replacing them with the "child" individuals.

These rules of thumb usually give the best result:
- Use a population size of at least 4 times the number of cities.
- Set the number of parents to about a quarter of the population size.
- Use a mutation rate between 1 and 10%.


If you don't want to use the source code (src.zip), just throw it out.
The source is for Delphi 32 bit.


Known bugs:

- None so far.


Misc.:

If you want more information on genetic algorithms, I suggest you
search the Web, using keywords such as artificial life, genetic
algorithms, and evolutionary algorithms.



Troels Jakobsen
delphiuser@get2net.dk

Comments, suggestions, and the like are very welcome.
If you like and use the program, please drop me a mail.
